//* still wrapping my head around passing arrays into functions
//*     tried to learn about returning them before really understanding passing them.
//*         So was over complicating it with pointers, and getting nothing but errors

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <cs50.h>

int only_digits(char inArr[]);
void encrypt(char arr[], int ln, int k);

// int main(void)
int main(int argc, char *argv[])
{

//* returns 1 if not enough arguments are given
    if (argc != 2)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }


//* get K = key, as an int
    int key = atoi(argv[1]);

//* make sure key is only digits
    if (only_digits(argv[1]) == 1)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }


//* record string including white space from user
    char pArr[256];
    printf("plaintext:  ");
    scanf("%[^\n]256s", pArr);

//* get length of string
    int length = strlen(pArr);

//* pass input array, length of array and key
    encrypt(pArr, length, key);

    return 0;

}

int only_digits(char inArr[])
{
    int n = strlen(inArr);
    for (int j = 0; j < n; j++)
    {
        // * ascii convert
        inArr[j] = toascii(inArr[j]);

        //* check if out of bounds of ascii 0-9
        if (inArr[j] > 57 || inArr[j] < 48)
        {
            return 1;
        }

    }
    return 0;
}


void encrypt(char arr[], int ln, int k)
{

    printf("ciphertext: ");

    for (int i = 0; i < ln; i++)
    {
        //* itterate checking for case, ascii conversion + key, modulo 26, then adding the needed int
        if (isupper(arr[i]))
        {
            printf("%c", ((toascii(arr[i]) + k - 65) % 26) + 65);
        }
        else if (islower(arr[i]))
        {
            printf("%c", ((toascii(arr[i]) + k - 97) % 26) + 97);
        }
        else
        {
            printf("%c", toascii(arr[i]));
        }
    }
    printf("\n");

}
